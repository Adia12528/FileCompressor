// Global state
let uploadedFile = null;
let compressedSize = 0;
// effects flag (background animations)
let effectsEnabled = true;

// --- i18n Setup ---
const LANG_KEY = 'app:lang';
const languages = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
    { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
    { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
    { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥' },
    { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
    { code: 'pt', name: 'Portugu√™s', flag: 'üáµüáπ' },
    { code: 'hi', name: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
    { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
];

const translations = {
    en: {
        'ui.effects.label': 'Effects',
        'ui.effects.on': 'On',
        'ui.effects.paused': 'Paused',
        'ui.effects.off': 'Off',
        'ui.lang': 'Language',
        'ui.title': 'One-Click File Optimizer',
        'ui.subtitle': 'PDF, DOCX, PPTX, Images, and more. Upload, set your target size, and compress.',
        'ui.drop': 'Drag & Drop or <span class="text-violet-600 hover:text-violet-800 transition">Browse Files</span>',
        'ui.supported': 'Supported: PDF, DOCX, PPTX, JPG, PNG, up to 50MB',
        'ui.fileLoaded': 'File Loaded:',
        'ui.originalSize': 'Original Size',
        'ui.fileType': 'File Type',
        'ui.desiredSize': 'Desired Output Size (MB):',
        'ui.desiredSize.placeholder': 'e.g., 1.5',
        'ui.desiredSize.help': 'Enter the maximum size you want the compressed file to be.',
        'ui.simulateButton': 'Simulate Compression',
        'ui.result.title': 'Compression Complete!',
        'ui.result.original': 'Original',
        'ui.result.compressed': 'Compressed',
        'ui.result.reduction': 'Reduction',
        'ui.download': 'Download Compressed File',
        'ui.compressAnother': 'Compress Another File',
        'ui.loading.title': 'Compressing File... (Simulation in progress)',
        'ui.loading.subtitle': 'This would be the real-time server step in production.',
        'ui.modal.close': 'Close',
        'modal.inputError.title': 'Input Error',
        'modal.inputError.body': 'Please enter a valid target size greater than zero.',
        'modal.warning.title': 'Compression Warning',
        'modal.warning.body': 'The target size you set is larger than or equal to the original file size. A minor optimization will be simulated, but for best results, aim for a smaller size.',
        'modal.downloadError.title': 'Download Error',
        'modal.downloadError.body': 'No compressed file is ready for download.',
        'modal.downloadStarted.title': 'Download Initiated',
        'modal.downloadStarted.body': 'The browser is downloading a simulated version named: <strong>{name}</strong>.<br>In a real-world production app, this file would be the optimized size ({size}).',
    },
    es: {
        'ui.lang': 'Idioma',
        'ui.effects.label': 'Efectos',
        'ui.effects.on': 'Activado',
        'ui.effects.off': 'Desactivado',
        'ui.effects.paused': 'Pausado',
        'ui.title': 'Optimizador de Archivos en Un Clic',
        'ui.subtitle': 'PDF, DOCX, PPTX, Im√°genes y m√°s. Sube, define el tama√±o objetivo y comprime.',
        'ui.drop': 'Arrastra y suelta o <span class="text-violet-600 hover:text-violet-800 transition">Explorar archivos</span>',
        'ui.supported': 'Compatibles: PDF, DOCX, PPTX, JPG, PNG, hasta 50MB',
        'ui.fileLoaded': 'Archivo cargado:',
        'ui.originalSize': 'Tama√±o original',
        'ui.fileType': 'Tipo de archivo',
        'ui.desiredSize': 'Tama√±o de salida deseado (MB):',
        'ui.desiredSize.placeholder': 'p. ej., 1.5',
        'ui.desiredSize.help': 'Introduce el tama√±o m√°ximo que deseas para el archivo comprimido.',
        'ui.simulateButton': 'Simular compresi√≥n',
        'ui.result.title': '¬°Compresi√≥n completada!',
        'ui.result.original': 'Original',
        'ui.result.compressed': 'Comprimido',
        'ui.result.reduction': 'Reducci√≥n',
        'ui.download': 'Descargar archivo comprimido',
        'ui.compressAnother': 'Comprimir otro archivo',
        'ui.loading.title': 'Comprimiendo archivo... (Simulaci√≥n en curso)',
        'ui.loading.subtitle': 'Esto ser√≠a el paso del servidor en producci√≥n.',
        'ui.modal.close': 'Cerrar',
        'modal.inputError.title': 'Error de entrada',
        'modal.inputError.body': 'Introduce un tama√±o objetivo v√°lido mayor que cero.',
        'modal.warning.title': 'Advertencia de compresi√≥n',
        'modal.warning.body': 'El tama√±o objetivo es mayor o igual que el archivo original. Se simular√° una optimizaci√≥n m√≠nima; para mejores resultados, usa un tama√±o menor.',
        'modal.downloadError.title': 'Error de descarga',
        'modal.downloadError.body': 'No hay un archivo comprimido listo para descargar.',
        'modal.downloadStarted.title': 'Descarga iniciada',
        'modal.downloadStarted.body': 'El navegador est√° descargando una versi√≥n simulada llamada: <strong>{name}</strong>.<br>En producci√≥n, este archivo tendr√≠a el tama√±o optimizado ({size}).',
    },
    fr: {
        'ui.lang': 'Langue',
        'ui.effects.label': 'Effets',
        'ui.effects.on': 'Activ√©',
        'ui.effects.off': 'D√©sactiv√©',
        'ui.effects.paused': 'En pause',
        'ui.title': 'Optimiseur de fichiers en un clic',
        'ui.subtitle': 'PDF, DOCX, PPTX, images, etc. T√©l√©versez, d√©finissez la taille cible et compressez.',
        'ui.drop': 'Glisser-d√©poser ou <span class="text-violet-600 hover:text-violet-800 transition">Parcourir les fichiers</span>',
        'ui.supported': 'Pris en charge : PDF, DOCX, PPTX, JPG, PNG, jusqu‚Äô√† 50 Mo',
        'ui.fileLoaded': 'Fichier charg√© :',
        'ui.originalSize': 'Taille d‚Äôorigine',
        'ui.fileType': 'Type de fichier',
        'ui.desiredSize': 'Taille de sortie souhait√©e (Mo) :',
        'ui.desiredSize.placeholder': 'ex. : 1,5',
        'ui.desiredSize.help': 'Entrez la taille maximale souhait√©e pour le fichier compress√©.',
        'ui.simulateButton': 'Simuler la compression',
        'ui.result.title': 'Compression termin√©e !',
        'ui.result.original': 'Original',
        'ui.result.compressed': 'Compress√©',
        'ui.result.reduction': 'R√©duction',
        'ui.download': 'T√©l√©charger le fichier compress√©',
        'ui.compressAnother': 'Compresser un autre fichier',
        'ui.loading.title': 'Compression du fichier... (Simulation en cours)',
        'ui.loading.subtitle': 'Ceci serait l‚Äô√©tape c√¥t√© serveur en production.',
        'ui.modal.close': 'Fermer',
        'modal.inputError.title': 'Erreur de saisie',
        'modal.inputError.body': 'Veuillez entrer une taille cible valide sup√©rieure √† z√©ro.',
        'modal.warning.title': 'Avertissement de compression',
        'modal.warning.body': 'La taille cible est sup√©rieure ou √©gale √† la taille d‚Äôorigine. Une l√©g√®re optimisation sera simul√©e ; pour de meilleurs r√©sultats, visez plus petit.',
        'modal.downloadError.title': 'Erreur de t√©l√©chargement',
        'modal.downloadError.body': 'Aucun fichier compress√© pr√™t √† √™tre t√©l√©charg√©.',
        'modal.downloadStarted.title': 'T√©l√©chargement lanc√©',
        'modal.downloadStarted.body': 'Le navigateur t√©l√©charge une version simul√©e nomm√©e : <strong>{name}</strong>.<br>En production, ce fichier aurait la taille optimis√©e ({size}).',
    },
    de: {
        'ui.lang': 'Sprache',
        'ui.effects.label': 'Effekte',
        'ui.effects.on': 'Ein',
        'ui.effects.off': 'Aus',
        'ui.effects.paused': 'Pausiert',
        'ui.title': 'Dateioptimierer mit einem Klick',
        'ui.subtitle': 'PDF, DOCX, PPTX, Bilder und mehr. Hochladen, Zielgr√∂√üe festlegen und komprimieren.',
        'ui.drop': 'Ziehen & Ablegen oder <span class="text-violet-600 hover:text-violet-800 transition">Dateien durchsuchen</span>',
        'ui.supported': 'Unterst√ºtzt: PDF, DOCX, PPTX, JPG, PNG, bis 50 MB',
        'ui.fileLoaded': 'Datei geladen:',
        'ui.originalSize': 'Urspr√ºngliche Gr√∂√üe',
        'ui.fileType': 'Dateityp',
        'ui.desiredSize': 'Gew√ºnschte Ausgabengr√∂√üe (MB):',
        'ui.desiredSize.placeholder': 'z. B. 1,5',
        'ui.desiredSize.help': 'Geben Sie die maximale gew√ºnschte Gr√∂√üe der komprimierten Datei ein.',
        'ui.simulateButton': 'Kompression simulieren',
        'ui.result.title': 'Kompression abgeschlossen!',
        'ui.result.original': 'Original',
        'ui.result.compressed': 'Komprimiert',
        'ui.result.reduction': 'Reduktion',
        'ui.download': 'Komprimierte Datei herunterladen',
        'ui.compressAnother': 'Weitere Datei komprimieren',
        'ui.loading.title': 'Datei wird komprimiert... (Simulation)',
        'ui.loading.subtitle': 'Dies w√§re in Produktion der Serverschritt.',
        'ui.modal.close': 'Schlie√üen',
        'modal.inputError.title': 'Eingabefehler',
        'modal.inputError.body': 'Bitte geben Sie eine g√ºltige Zielgr√∂√üe gr√∂√üer als Null ein.',
        'modal.warning.title': 'Kompressionswarnung',
        'modal.warning.body': 'Die Zielgr√∂√üe ist gr√∂√üer oder gleich der Originalgr√∂√üe. Eine leichte Optimierung wird simuliert; f√ºr bessere Ergebnisse kleiner ansetzen.',
        'modal.downloadError.title': 'Download-Fehler',
        'modal.downloadError.body': 'Keine komprimierte Datei zum Herunterladen bereit.',
        'modal.downloadStarted.title': 'Download gestartet',
        'modal.downloadStarted.body': 'Der Browser l√§dt eine simulierte Version namens: <strong>{name}</strong> herunter.<br>In Produktion h√§tte diese Datei die optimierte Gr√∂√üe ({size}).',
    },
    zh: {
        'ui.lang': 'ËØ≠Ë®Ä',
        'ui.effects.label': 'ÊïàÊûú',
        'ui.effects.on': 'ÂºÄÂêØ',
        'ui.effects.off': 'ÂÖ≥Èó≠',
        'ui.effects.paused': 'Â∑≤ÊöÇÂÅú',
        'ui.title': '‰∏ÄÈîÆÊñá‰ª∂‰ºòÂåñÂô®',
        'ui.subtitle': 'ÊîØÊåÅ PDF„ÄÅDOCX„ÄÅPPTX„ÄÅÂõæÁâáÁ≠â„ÄÇ‰∏ä‰º†„ÄÅËÆæÁΩÆÁõÆÊ†áÂ§ßÂ∞èÂπ∂ÂéãÁº©„ÄÇ',
        'ui.drop': 'ÊãñÊîæÊàñ <span class="text-violet-600 hover:text-violet-800 transition">ÊµèËßàÊñá‰ª∂</span>',
        'ui.supported': 'ÊîØÊåÅÔºöPDF„ÄÅDOCX„ÄÅPPTX„ÄÅJPG„ÄÅPNGÔºåÊúÄÂ§ß 50MB',
        'ui.fileLoaded': 'Â∑≤Âä†ËΩΩÊñá‰ª∂Ôºö',
        'ui.originalSize': 'ÂéüÂßãÂ§ßÂ∞è',
        'ui.fileType': 'Êñá‰ª∂Á±ªÂûã',
        'ui.desiredSize': 'ÊúüÊúõËæìÂá∫Â§ßÂ∞èÔºàMBÔºâÔºö',
        'ui.desiredSize.placeholder': '‰æãÂ¶Ç 1.5',
        'ui.desiredSize.help': 'ËæìÂÖ•‰Ω†Â∏åÊúõÂéãÁº©ÂêéÊñá‰ª∂ÁöÑÊúÄÂ§ßÂ§ßÂ∞è„ÄÇ',
        'ui.simulateButton': 'Ê®°ÊãüÂéãÁº©',
        'ui.result.title': 'ÂéãÁº©ÂÆåÊàêÔºÅ',
        'ui.result.original': 'ÂéüÂßã',
        'ui.result.compressed': 'Â∑≤ÂéãÁº©',
        'ui.result.reduction': 'ÂáèÂ∞ëÈáè',
        'ui.download': '‰∏ãËΩΩÂéãÁº©Êñá‰ª∂',
        'ui.compressAnother': 'ÂéãÁº©Âè¶‰∏Ä‰∏™Êñá‰ª∂',
        'ui.loading.title': 'Ê≠£Âú®ÂéãÁº©Êñá‰ª∂‚Ä¶ÔºàÊ®°ÊãüËøõË°å‰∏≠Ôºâ',
        'ui.loading.subtitle': 'Âú®Áîü‰∫ßÁéØÂ¢É‰∏≠ÔºåÊ≠§Ê≠•È™§Áî±ÊúçÂä°Âô®ÂÆåÊàê„ÄÇ',
        'ui.modal.close': 'ÂÖ≥Èó≠',
        'modal.inputError.title': 'ËæìÂÖ•ÈîôËØØ',
        'modal.inputError.body': 'ËØ∑ËæìÂÖ•Â§ß‰∫éÈõ∂ÁöÑÊúâÊïàÁõÆÊ†áÂ§ßÂ∞è„ÄÇ',
        'modal.warning.title': 'ÂéãÁº©Ë≠¶Âëä',
        'modal.warning.body': '‰Ω†ËÆæÁΩÆÁöÑÁõÆÊ†áÂ§ßÂ∞èÂ§ß‰∫éÊàñÁ≠â‰∫éÂéüÂßãÊñá‰ª∂Â§ßÂ∞è„ÄÇÂ∞ÜÊ®°ÊãüËΩªÂæÆ‰ºòÂåñÔºõ‰∏∫Ëé∑ÂæóÊõ¥Â•ΩÊïàÊûúÔºåËØ∑ËÆæÂÆöÊõ¥Â∞èÁöÑÂ§ßÂ∞è„ÄÇ',
        'modal.downloadError.title': '‰∏ãËΩΩÈîôËØØ',
        'modal.downloadError.body': 'Ê≤°ÊúâÂèØ‰∏ãËΩΩÁöÑÂéãÁº©Êñá‰ª∂„ÄÇ',
        'modal.downloadStarted.title': 'ÂºÄÂßã‰∏ãËΩΩ',
        'modal.downloadStarted.body': 'ÊµèËßàÂô®Ê≠£Âú®‰∏ãËΩΩÂêç‰∏∫ <strong>{name}</strong> ÁöÑÊ®°ÊãüÁâàÊú¨„ÄÇ<br>Âú®Áîü‰∫ß‰∏≠ÔºåËØ•Êñá‰ª∂Â∞Ü‰∏∫‰ºòÂåñÂêéÁöÑÂ§ßÂ∞èÔºà{size}Ôºâ„ÄÇ',
    },
    ar: {
        'ui.lang': 'ÿßŸÑŸÑÿ∫ÿ©',
        'ui.effects.label': 'ÿßŸÑÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™',
        'ui.effects.on': 'ÿ™ÿ¥ÿ∫ŸäŸÑ',
        'ui.effects.off': 'ÿ•ŸäŸÇÿßŸÅ',
        'ui.effects.paused': 'ŸÖŸàŸÇŸàŸÅ',
        'ui.title': 'ŸÖÿ≠ÿ≥ŸëŸÜ ÿßŸÑŸÖŸÑŸÅÿßÿ™ ÿ®ŸÜŸÇÿ±ÿ© Ÿàÿßÿ≠ÿØÿ©',
        'ui.subtitle': 'PDF ŸàDOCX ŸàPPTX ŸàÿµŸàÿ± ÿ£ÿÆÿ±Ÿâ. ÿßÿ±ŸÅÿπ ÿßŸÑŸÖŸÑŸÅ Ÿàÿ≠ÿØÿØ ÿßŸÑÿ≠ÿ¨ŸÖ ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ÿ´ŸÖ ÿßÿ∂ÿ∫ÿ∑ ÿ∂ÿ∫ÿ∑.',
        'ui.drop': 'ÿßÿ≥ÿ≠ÿ® Ÿàÿ£ŸÅŸÑÿ™ ÿ£Ÿà <span class="text-violet-600 hover:text-violet-800 transition">ÿ™ÿµŸÅÿ≠ ÿßŸÑŸÖŸÑŸÅÿßÿ™</span>',
        'ui.supported': 'ÿßŸÑŸÖÿØÿπŸàŸÖ: PDF ŸàDOCX ŸàPPTX ŸàJPG ŸàPNG ÿ≠ÿ™Ÿâ 50MB',
        'ui.fileLoaded': 'ÿ™ŸÖ ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÑŸÅ:',
        'ui.originalSize': 'ÿßŸÑÿ≠ÿ¨ŸÖ ÿßŸÑÿ£ÿµŸÑŸä',
        'ui.fileType': 'ŸÜŸàÿπ ÿßŸÑŸÖŸÑŸÅ',
        'ui.desiredSize': 'ÿßŸÑÿ≠ÿ¨ŸÖ ÿßŸÑŸÖÿ∑ŸÑŸàÿ® (MB):',
        'ui.desiredSize.placeholder': 'ŸÖÿ´ÿßŸÑ: 1.5',
        'ui.desiredSize.help': 'ÿ£ÿØÿÆŸÑ ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ ŸÑŸÑÿ≠ÿ¨ŸÖ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØŸá ÿ®ÿπÿØ ÿßŸÑÿ∂ÿ∫ÿ∑.',
        'ui.simulateButton': 'ŸÖÿ≠ÿßŸÉÿßÿ© ÿßŸÑÿ∂ÿ∫ÿ∑',
        'ui.result.title': 'ÿßŸÉÿ™ŸÖŸÑ ÿßŸÑÿ∂ÿ∫ÿ∑!',
        'ui.result.original': 'ÿßŸÑÿ£ÿµŸÑŸä',
        'ui.result.compressed': 'ÿ®ÿπÿØ ÿßŸÑÿ∂ÿ∫ÿ∑',
        'ui.result.reduction': 'ÿßŸÑŸÜŸÇÿµÿßŸÜ',
        'ui.download': 'ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑŸÖÿ∂ÿ∫Ÿàÿ∑',
        'ui.compressAnother': 'ÿ∂ÿ∫ÿ∑ ŸÖŸÑŸÅ ÿ¢ÿÆÿ±',
        'ui.loading.title': 'ÿ¨ÿßÿ±Ÿç ÿ∂ÿ∫ÿ∑ ÿßŸÑŸÖŸÑŸÅ... (ŸÖÿ≠ÿßŸÉÿßÿ©)',
        'ui.loading.subtitle': 'ŸÅŸä ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨ÿå ÿ™ŸÉŸàŸÜ Ÿáÿ∞Ÿá ÿßŸÑÿÆÿ∑Ÿàÿ© ÿπŸÑŸâ ÿßŸÑÿÆÿßÿØŸÖ.',
        'ui.modal.close': 'ÿ•ÿ∫ŸÑÿßŸÇ',
        'modal.inputError.title': 'ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ•ÿØÿÆÿßŸÑ',
        'modal.inputError.body': 'Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿ≠ÿ¨ŸÖ ŸáÿØŸÅ ÿµÿßŸÑÿ≠ ÿ£ŸÉÿ®ÿ± ŸÖŸÜ ÿµŸÅÿ±.',
        'modal.warning.title': 'ÿ™ÿ≠ÿ∞Ÿäÿ± ÿßŸÑÿ∂ÿ∫ÿ∑',
        'modal.warning.body': 'ÿßŸÑÿ≠ÿ¨ŸÖ ÿßŸÑŸáÿØŸÅ ÿ£ŸÉÿ®ÿ± ŸÖŸÜ ÿ£Ÿà Ÿäÿ≥ÿßŸàŸä ÿßŸÑÿ≠ÿ¨ŸÖ ÿßŸÑÿ£ÿµŸÑŸä. ÿ≥Ÿäÿ™ŸÖ ŸÖÿ≠ÿßŸÉÿßÿ© ÿ™ÿ≠ÿ≥ŸäŸÜ ÿ®ÿ≥Ÿäÿ∑ÿõ ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÜÿ™ÿßÿ¶ÿ¨ ÿ£ŸÅÿ∂ŸÑ ÿßÿÆÿ™ÿ± ÿ≠ÿ¨ŸÖÿßŸã ÿ£ÿµÿ∫ÿ±.',
        'modal.downloadError.title': 'ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ŸÜÿ≤ŸäŸÑ',
        'modal.downloadError.body': 'ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖŸÑŸÅ ŸÖÿ∂ÿ∫Ÿàÿ∑ ÿ¨ÿßŸáÿ≤ ŸÑŸÑÿ™ŸÜÿ≤ŸäŸÑ.',
        'modal.downloadStarted.title': 'ÿ®ÿØÿ£ ÿßŸÑÿ™ŸÜÿ≤ŸäŸÑ',
        'modal.downloadStarted.body': 'ŸäŸÇŸàŸÖ ÿßŸÑŸÖÿ™ÿµŸÅÿ≠ ÿ®ÿ™ŸÜÿ≤ŸäŸÑ ŸÜÿ≥ÿÆÿ© ŸÖÿ≠ÿßŸÉÿßÿ© ÿ®ÿßÿ≥ŸÖ: <strong>{name}</strong>.<br>ŸÅŸä ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨ ÿ≥ŸäŸÉŸàŸÜ ÿßŸÑŸÖŸÑŸÅ ÿ®ÿßŸÑÿ≠ÿ¨ŸÖ ÿßŸÑŸÖŸèÿ≠ÿ≥ŸëŸÜ ({size}).',
    },
    ru: {
        'ui.lang': '–Ø–∑—ã–∫',
        'ui.effects.label': '–≠—Ñ—Ñ–µ–∫—Ç—ã',
        'ui.effects.on': '–í–∫–ª',
        'ui.effects.off': '–í—ã–∫–ª',
        'ui.effects.paused': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
        'ui.title': '–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫',
        'ui.subtitle': 'PDF, DOCX, PPTX, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥—Ä. –ó–∞–≥—Ä—É–∑–∏—Ç–µ, –∑–∞–¥–∞–π—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –∏ —Å–∂–∏–º–∞–π—Ç–µ.',
        'ui.drop': '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ <span class="text-violet-600 hover:text-violet-800 transition">–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã</span>',
        'ui.supported': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: PDF, DOCX, PPTX, JPG, PNG, –¥–æ 50 –ú–ë',
        'ui.fileLoaded': '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:',
        'ui.originalSize': '–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä',
        'ui.fileType': '–¢–∏–ø —Ñ–∞–π–ª–∞',
        'ui.desiredSize': '–ñ–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä (–ú–ë):',
        'ui.desiredSize.placeholder': '–Ω–∞–ø—Ä., 1.5',
        'ui.desiredSize.help': '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.',
        'ui.simulateButton': '–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∂–∞—Ç–∏–µ',
        'ui.result.title': '–°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!',
        'ui.result.original': '–ò—Å—Ö–æ–¥–Ω—ã–π',
        'ui.result.compressed': '–°–∂–∞—Ç—ã–π',
        'ui.result.reduction': '–£–º–µ–Ω—å—à–µ–Ω–∏–µ',
        'ui.download': '–°–∫–∞—á–∞—Ç—å —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª',
        'ui.compressAnother': '–°–∂–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª',
        'ui.loading.title': '–°–∂–∞—Ç–∏–µ —Ñ–∞–π–ª–∞... (—Å–∏–º—É–ª—è—Ü–∏—è)',
        'ui.loading.subtitle': '–í –ø—Ä–æ–¥–µ —ç—Ç–æ—Ç —à–∞–≥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ä–≤–µ—Ä.',
        'ui.modal.close': '–ó–∞–∫—Ä—ã—Ç—å',
        'modal.inputError.title': '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞',
        'modal.inputError.body': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ –Ω—É–ª—è.',
        'modal.warning.title': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∂–∞—Ç–∏–∏',
        'modal.warning.body': '–¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ –ª–∏–±–æ —Ä–∞–≤–µ–Ω –∏—Å—Ö–æ–¥–Ω–æ–º—É. –ë—É–¥–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ; –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä.',
        'modal.downloadError.title': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
        'modal.downloadError.body': '–ù–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.',
        'modal.downloadStarted.title': '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞—Ç–∞',
        'modal.downloadStarted.body': '–ë—Ä–∞—É–∑–µ—Ä —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –∏–º–µ–Ω–µ–º: <strong>{name}</strong>.<br>–í –ø—Ä–æ–¥–µ —Ñ–∞–π–ª –±—ã–ª –±—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ({size}).',
    },
    pt: {
        'ui.lang': 'Idioma',
        'ui.effects.label': 'Efeitos',
        'ui.effects.on': 'Ligado',
        'ui.effects.off': 'Desligado',
        'ui.effects.paused': 'Pausado',
        'ui.title': 'Otimizador de Arquivos com Um Clique',
        'ui.subtitle': 'PDF, DOCX, PPTX, imagens e muito mais. Envie, defina o tamanho alvo e comprima.',
        'ui.drop': 'Arraste e solte ou <span class="text-violet-600 hover:text-violet-800 transition">Procurar arquivos</span>',
        'ui.supported': 'Compat√≠veis: PDF, DOCX, PPTX, JPG, PNG, at√© 50MB',
        'ui.fileLoaded': 'Arquivo carregado:',
        'ui.originalSize': 'Tamanho original',
        'ui.fileType': 'Tipo de arquivo',
        'ui.desiredSize': 'Tamanho de sa√≠da desejado (MB):',
        'ui.desiredSize.placeholder': 'ex.: 1,5',
        'ui.desiredSize.help': 'Informe o tamanho m√°ximo desejado do arquivo compactado.',
        'ui.simulateButton': 'Simular compacta√ß√£o',
        'ui.result.title': 'Compacta√ß√£o conclu√≠da!',
        'ui.result.original': 'Original',
        'ui.result.compressed': 'Compactado',
        'ui.result.reduction': 'Redu√ß√£o',
        'ui.download': 'Baixar arquivo compactado',
        'ui.compressAnother': 'Compactar outro arquivo',
        'ui.loading.title': 'Compactando arquivo... (Simula√ß√£o)',
        'ui.loading.subtitle': 'Em produ√ß√£o, esta etapa seria no servidor.',
        'ui.modal.close': 'Fechar',
        'modal.inputError.title': 'Erro de entrada',
        'modal.inputError.body': 'Insira um tamanho alvo v√°lido maior que zero.',
        'modal.warning.title': 'Aviso de compacta√ß√£o',
        'modal.warning.body': 'O tamanho alvo √© maior ou igual ao tamanho original. Uma leve otimiza√ß√£o ser√° simulada; para melhores resultados, use um tamanho menor.',
        'modal.downloadError.title': 'Erro de download',
        'modal.downloadError.body': 'Nenhum arquivo compactado pronto para download.',
        'modal.downloadStarted.title': 'Download iniciado',
        'modal.downloadStarted.body': 'O navegador est√° baixando uma vers√£o simulada chamada: <strong>{name}</strong>.<br>No ambiente de produ√ß√£o, este arquivo teria o tamanho otimizado ({size}).',
    },
    hi: {
        'ui.lang': '‡§≠‡§æ‡§∑‡§æ',
        'ui.effects.label': '‡§™‡•ç‡§∞‡§≠‡§æ‡§µ',
        'ui.effects.on': '‡§ö‡§æ‡§≤‡•Ç',
        'ui.effects.off': '‡§¨‡§Ç‡§¶',
        'ui.effects.paused': '‡§∞‡•Å‡§ï‡§æ ‡§π‡•Å‡§Ü',
        'ui.title': '‡§µ‡§®-‡§ï‡•ç‡§≤‡§ø‡§ï ‡§´‡§º‡§æ‡§á‡§≤ ‡§ë‡§™‡•ç‡§ü‡§ø‡§Æ‡§æ‡§á‡§ú‡§º‡§∞',
        'ui.subtitle': 'PDF, DOCX, PPTX, ‡§á‡§Æ‡•á‡§ú ‡§Ü‡§¶‡§ø‡•§ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç, ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§Ü‡§ï‡§æ‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
        'ui.drop': '‡§°‡•ç‡§∞‡•à‡§ó ‡§î‡§∞ ‡§°‡•ç‡§∞‡•â‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ <span class="text-violet-600 hover:text-violet-800 transition">‡§´‡§æ‡§á‡§≤ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç</span>',
        'ui.supported': '‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§: PDF, DOCX, PPTX, JPG, PNG, 50MB ‡§§‡§ï',
        'ui.fileLoaded': '‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§à:',
        'ui.originalSize': '‡§Æ‡•Ç‡§≤ ‡§Ü‡§ï‡§æ‡§∞',
        'ui.fileType': '‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
        'ui.desiredSize': '‡§µ‡§æ‡§Ç‡§õ‡§ø‡§§ ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§Ü‡§ï‡§æ‡§∞ (MB):',
        'ui.desiredSize.placeholder': '‡§â‡§¶‡§æ., 1.5',
        'ui.desiredSize.help': '‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∏‡•ç‡§° ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§Ü‡§ï‡§æ‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§',
        'ui.simulateButton': '‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∂‡§® ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç',
        'ui.result.title': '‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∂‡§® ‡§™‡•Ç‡§∞‡•ç‡§£!',
        'ui.result.original': '‡§Æ‡•Ç‡§≤',
        'ui.result.compressed': '‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∏‡•ç‡§°',
        'ui.result.reduction': '‡§ï‡§Æ‡•Ä',
        'ui.download': '‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∏‡•ç‡§° ‡§´‡§º‡§æ‡§á‡§≤ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç',
        'ui.compressAnother': '‡§è‡§ï ‡§î‡§∞ ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∏ ‡§ï‡§∞‡•á‡§Ç',
        'ui.loading.title': '‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à... (‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§®)',
        'ui.loading.subtitle': '‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•Ä ‡§∏‡•ç‡§ü‡•á‡§™ ‡§π‡•ã‡§ó‡•Ä‡•§',
        'ui.modal.close': '‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç',
        'modal.inputError.title': '‡§á‡§®‡§™‡•Å‡§ü ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø',
        'modal.inputError.body': '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∂‡•Ç‡§®‡•ç‡§Ø ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§Ü‡§ï‡§æ‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§',
        'modal.warning.title': '‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∂‡§® ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä',
        'modal.warning.body': '‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§Ü‡§ï‡§æ‡§∞ ‡§Æ‡•Ç‡§≤ ‡§Ü‡§ï‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§Ø‡§æ ‡§¨‡§∞‡§æ‡§¨‡§∞ ‡§π‡•à‡•§ ‡§π‡§≤‡•ç‡§ï‡§æ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§® ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ; ‡§¨‡•á‡§π‡§§‡§∞ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§õ‡•ã‡§ü‡§æ ‡§Ü‡§ï‡§æ‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§',
        'modal.downloadError.title': '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø',
        'modal.downloadError.body': '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§ï‡§Ç‡§™‡•ç‡§∞‡•á‡§∏‡•ç‡§° ‡§´‡§º‡§æ‡§á‡§≤ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§',
        'modal.downloadStarted.title': '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç',
        'modal.downloadStarted.body': '‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ <strong>{name}</strong> ‡§®‡§æ‡§Æ ‡§ï‡§æ ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§ü‡•á‡§° ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§<br>‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç, ‡§Ø‡§π ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ ‡§Ü‡§ï‡§æ‡§∞ ({size}) ‡§ï‡•Ä ‡§π‡•ã‡§ó‡•Ä‡•§',
    },
    ja: {
        'ui.lang': 'Ë®ÄË™û',
        'ui.effects.label': '„Ç®„Éï„Çß„ÇØ„Éà',
        'ui.effects.on': '„Ç™„É≥',
        'ui.effects.off': '„Ç™„Éï',
        'ui.effects.paused': '‰∏ÄÊôÇÂÅúÊ≠¢',
        'ui.title': '„ÉØ„É≥„ÇØ„É™„ÉÉ„ÇØ„Éª„Éï„Ç°„Ç§„É´ÊúÄÈÅ©Âåñ',
        'ui.subtitle': 'PDF„ÄÅDOCX„ÄÅPPTX„ÄÅÁîªÂÉè„Å™„Å©„ÄÇ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶ÁõÆÊ®ô„Çµ„Ç§„Ç∫„ÇíË®≠ÂÆö„Åó„ÄÅÂúßÁ∏Æ„Åó„Åæ„Åô„ÄÇ',
        'ui.drop': '„Éâ„É©„ÉÉ„Ç∞ÔºÜ„Éâ„É≠„ÉÉ„Éó „Åæ„Åü„ÅØ <span class="text-violet-600 hover:text-violet-800 transition">„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû</span>',
        'ui.supported': 'ÂØæÂøú: PDF, DOCX, PPTX, JPG, PNG„ÄÅÊúÄÂ§ß50MB',
        'ui.fileLoaded': 'Ë™≠„ÅøËæº„Åæ„Çå„Åü„Éï„Ç°„Ç§„É´:',
        'ui.originalSize': 'ÂÖÉ„ÅÆ„Çµ„Ç§„Ç∫',
        'ui.fileType': '„Éï„Ç°„Ç§„É´ÂΩ¢Âºè',
        'ui.desiredSize': 'Â∏åÊúõÂá∫Âäõ„Çµ„Ç§„Ç∫ÔºàMBÔºâ:',
        'ui.desiredSize.placeholder': '‰æã: 1.5',
        'ui.desiredSize.help': 'ÂúßÁ∏ÆÂæå„ÅÆÊúÄÂ§ß„Çµ„Ç§„Ç∫„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        'ui.simulateButton': 'ÂúßÁ∏Æ„Çí„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥',
        'ui.result.title': 'ÂúßÁ∏Æ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ',
        'ui.result.original': 'ÂÖÉ',
        'ui.result.compressed': 'ÂúßÁ∏ÆÂæå',
        'ui.result.reduction': 'ÂâäÊ∏õÁéá',
        'ui.download': 'ÂúßÁ∏Æ„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ',
        'ui.compressAnother': 'Âà•„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂúßÁ∏Æ',
        'ui.loading.title': '„Éï„Ç°„Ç§„É´„ÇíÂúßÁ∏Æ‰∏≠‚Ä¶Ôºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Ôºâ',
        'ui.loading.subtitle': 'Êú¨Áï™„Åß„ÅØ„Åì„ÅÆÂá¶ÁêÜ„ÅØ„Çµ„Éº„Éê„ÉºÂÅ¥„ÅßË°å„Çè„Çå„Åæ„Åô„ÄÇ',
        'ui.modal.close': 'Èñâ„Åò„Çã',
        'modal.inputError.title': 'ÂÖ•Âäõ„Ç®„É©„Éº',
        'modal.inputError.body': '0 „Çà„ÇäÂ§ß„Åç„ÅÑÊúâÂäπ„Å™ÁõÆÊ®ô„Çµ„Ç§„Ç∫„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        'modal.warning.title': 'ÂúßÁ∏Æ„Å´Èñ¢„Åô„ÇãÊ≥®ÊÑè',
        'modal.warning.body': 'ÁõÆÊ®ô„Çµ„Ç§„Ç∫„ÅåÂÖÉ„ÅÆ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫‰ª•‰∏ä„Åß„Åô„ÄÇ„Çè„Åö„Åã„Å™ÊúÄÈÅ©Âåñ„ÅÆ„Åø„Çí„Ç∑„Éü„É•„É¨„Éº„Éà„Åó„Åæ„Åô„ÄÇ„Çà„ÇäËâØ„ÅÑÁµêÊûú„ÅÆ„Åü„ÇÅ„Å´„ÅØ„ÄÅÂ∞è„Åï„ÅÑ„Çµ„Ç§„Ç∫„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        'modal.downloadError.title': '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº',
        'modal.downloadError.body': '„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åß„Åç„ÇãÂúßÁ∏Æ„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ',
        'modal.downloadStarted.title': '„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÈñãÂßã',
        'modal.downloadStarted.body': '„Éñ„É©„Ç¶„Ç∂„Åå <strong>{name}</strong> „Å®„ÅÑ„ÅÜ„Ç∑„Éü„É•„É¨„Éº„ÉàÁâà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ<br>Êú¨Áï™„Åß„ÅØ„ÄÅÊúÄÈÅ©Âåñ„Çµ„Ç§„Ç∫Ôºà{size}Ôºâ„ÅÆ„Éï„Ç°„Ç§„É´„Å´„Å™„Çä„Åæ„Åô„ÄÇ',
    },
};

let currentLang = 'en';

function t(key) {
    const dict = translations[currentLang] || translations.en;
    return (dict && dict[key]) || translations.en[key] || '';
}
function tReplace(key, params) {
    let s = t(key);
    Object.keys(params || {}).forEach(k => {
        s = s.replace(new RegExp('\{' + k + '\}', 'g'), params[k]);
    });
    return s;
}

function getSystemLang() {
    const saved = localStorage.getItem(LANG_KEY);
    if (saved && translations[saved]) return saved;
    const navLangs = (navigator.languages || [navigator.language || 'en']).map(l => l.split('-')[0]);
    const match = navLangs.find(code => translations[code]);
    return match || 'en';
}

function applyTranslations(code) {
    currentLang = translations[code] ? code : 'en';
    document.documentElement.setAttribute('dir', currentLang === 'ar' ? 'rtl' : 'ltr');
    // Text content/HTML
    document.querySelectorAll('[data-i18n]').forEach(el => {
        const key = el.getAttribute('data-i18n');
        const val = t(key);
        if (val) el.innerHTML = val;
    });
    // Placeholders
    document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
        const key = el.getAttribute('data-i18n-placeholder');
        const val = t(key);
        if (val) el.setAttribute('placeholder', val);
    });
    updateLangButton();
}

function updateLangButton() {
    const btn = document.getElementById('lang-button');
    const flagSpan = document.getElementById('lang-flag');
    const langMeta = languages.find(l => l.code === currentLang) || languages[0];
    if (flagSpan) flagSpan.textContent = langMeta.flag;
    if (btn) btn.setAttribute('aria-label', `${t('ui.lang')}: ${langMeta.name}`);
}

function populateLangList() {
    const list = document.getElementById('lang-list');
    if (!list) return;
    list.innerHTML = '';
    languages.forEach(lang => {
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.className = 'lang-item-btn';
        btn.innerHTML = `<span class="text-lg">${lang.flag}</span><span>${lang.name}</span>`;
        btn.onclick = () => selectLanguage(lang.code);
        list.appendChild(btn);
    });
}

function selectLanguage(code) {
    const lang = translations[code] ? code : 'en';
    localStorage.setItem(LANG_KEY, lang);
    applyTranslations(lang);
    // Close the flyout
    const selector = document.querySelector('.lang-selector');
    const btn = document.getElementById('lang-button');
    if (selector) selector.classList.remove('open');
    if (btn) btn.setAttribute('aria-expanded', 'false');
}

// Utility function to format bytes into readable units
function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

// --- File Handling ---

const fileUpload = document.getElementById('file-upload');
const uploadArea = document.querySelector('.cute-upload-area');
        
// Handle file selection change
fileUpload.addEventListener('change', (event) => {
    const files = event.target.files;
    if (files.length > 0) {
        uploadedFile = files[0];
        displayFileDetails();
    }
});

// Handle Drag and Drop
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    uploadArea.addEventListener(eventName, preventDefaults, false);
    document.body.addEventListener(eventName, preventDefaults, false);
});

['dragenter', 'dragover'].forEach(eventName => {
    uploadArea.addEventListener(eventName, () => uploadArea.classList.add('active'), false);
});

['dragleave', 'drop'].forEach(eventName => {
    uploadArea.addEventListener(eventName, () => uploadArea.classList.remove('active'), false);
});

uploadArea.addEventListener('drop', (event) => {
    let dt = event.dataTransfer;
    let files = dt.files;
    if (files.length > 0) {
        uploadedFile = files[0];
        displayFileDetails();
    }
}, false);

function preventDefaults (e) {
    e.preventDefault();
    e.stopPropagation();
}


// --- UI Updates ---

function displayFileDetails() {
    if (!uploadedFile) return;

    // Show control section
    document.getElementById('upload-section').classList.add('hidden');
    document.getElementById('control-section').classList.remove('hidden');
    document.getElementById('result-section').classList.add('hidden');
            
    // Populate file info
    document.getElementById('file-name').textContent = uploadedFile.name;
    document.getElementById('original-size').textContent = formatBytes(uploadedFile.size);

    const fileExtension = uploadedFile.name.split('.').pop().toUpperCase();
    document.getElementById('file-type').textContent = fileExtension;

    // Set a realistic default target size (e.g., 50% reduction)
    const defaultTargetSizeMB = Math.max(0.1, (uploadedFile.size / (1024 * 1024) * 0.5)).toFixed(1);
    document.getElementById('target-size').value = defaultTargetSizeMB;
}

// --- Compression Logic (Simulation) ---

async function handleCompression() {
    if (!uploadedFile) return console.error("No file selected.");

    const targetSizeMB = parseFloat(document.getElementById('target-size').value);
    const targetSizeBytes = targetSizeMB * 1024 * 1024;
    const originalSizeBytes = uploadedFile.size;

    if (isNaN(targetSizeMB) || targetSizeMB <= 0) {
        return alertModal(t('modal.inputError.title'), t('modal.inputError.body'));
    }

    if (targetSizeBytes >= originalSizeBytes) {
        alertModal(t('modal.warning.title'), t('modal.warning.body'));
        // Simulate a tiny reduction if target is too high
        compressedSize = originalSizeBytes * 0.98; 
    } else {
        // Ensure the compressed size meets the target, but also has a minimum cap for realism
        const reductionFactor = Math.min(1 - (targetSizeBytes / originalSizeBytes), 0.9); // Cap reduction at 90%
        compressedSize = originalSizeBytes * (1 - reductionFactor);

        // If the target is very low, cap the minimum simulated size at 5% of the original for realism
        const minimumRealisticSize = originalSizeBytes * 0.05;
        compressedSize = Math.max(compressedSize, minimumRealisticSize);
    }
            
    // Start the loading animation
    document.getElementById('loading-overlay').classList.remove('hidden');

    // Simulate server-side processing delay (2 seconds)
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Stop the loading animation
    document.getElementById('loading-overlay').classList.add('hidden');
            
    showResult();
}

function showResult() {
    const originalSize = uploadedFile.size;
    const reduction = originalSize - compressedSize;
    const reductionPercentage = ((reduction / originalSize) * 100).toFixed(1);

    document.getElementById('control-section').classList.add('hidden');
    document.getElementById('result-section').classList.remove('hidden');

    document.getElementById('final-original-size').textContent = formatBytes(originalSize);
    document.getElementById('final-compressed-size').textContent = formatBytes(compressedSize);
    document.getElementById('reduction-percentage').textContent = `${reductionPercentage}%`;
}

function downloadSimulatedFile() {
    if (!uploadedFile || compressedSize === 0) {
        alertModal(t('modal.downloadError.title'), t('modal.downloadError.body'));
        return;
    }

    // In a real application, this is where the server would return the compressed file's URL.
    // We use the original file content for the download but rename it.
    const newFileName = uploadedFile.name.replace(/\.(pdf|docx|pptx|jpg|jpeg|png|zip|rar)$/i, (match, ext) => {
        return `-optimized.${ext}`;
    });
            
    const blob = uploadedFile;
    const url = URL.createObjectURL(blob);
            
    const a = document.createElement('a');
    a.href = url;
    a.download = newFileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    // Clean up
    URL.revokeObjectURL(url);
            
    // Inform the user that the download has started 
    alertModal(
        t('modal.downloadStarted.title'), 
        tReplace('modal.downloadStarted.body', { name: newFileName, size: formatBytes(compressedSize) })
    );
}
        
// --- Modal/Alert Function (Replaces standard alert()) ---
function alertModal(title, message) {
    // Check if modal exists, if not, create it
    let modal = document.getElementById('custom-alert-modal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'custom-alert-modal';
        modal.className = 'fixed inset-0 bg-gray-900 bg-opacity-70 flex items-center justify-center z-50 transition-opacity duration-300';
        modal.innerHTML = `
            <div class="bg-white rounded-xl shadow-2xl p-6 max-w-sm w-full transform transition-all duration-300 scale-95 opacity-0">
                <h4 id="alert-title" class="text-xl font-bold text-violet-700 mb-3"></h4>
                <p id="alert-message" class="text-gray-700 mb-6"></p>
                <button id="alert-close-btn" class="w-full p-3 rounded-lg bg-violet-600 hover:bg-violet-700 text-white font-semibold transition">
                    ${t('ui.modal.close')}
                </button>
            </div>
        `;
        document.body.appendChild(modal);
        document.getElementById('alert-close-btn').onclick = () => {
            // Start fade out animation
            modal.querySelector('div').classList.add('scale-95', 'opacity-0');
            modal.classList.add('opacity-0');
            setTimeout(() => modal.classList.add('hidden'), 300);
        };
    }

    document.getElementById('alert-title').textContent = title;
    document.getElementById('alert-message').innerHTML = message;
    // Ensure close button text matches current language on subsequent openings
    const closeBtn = document.getElementById('alert-close-btn');
    if (closeBtn) closeBtn.textContent = t('ui.modal.close');
    
    modal.classList.remove('hidden', 'opacity-0');
    modal.querySelector('div').classList.remove('scale-95', 'opacity-0');
}

// --- Reset Function ---
function resetApp() {
    uploadedFile = null;
    compressedSize = 0;
    document.getElementById('file-upload').value = '';

    document.getElementById('result-section').classList.add('hidden');
    document.getElementById('control-section').classList.add('hidden');
    document.getElementById('upload-section').classList.remove('hidden');
}

// --- Theme Toggle Function ---
function toggleTheme() {
    const body = document.body;
    const isDark = body.classList.toggle('dark-mode');
    const sunIcon = document.getElementById('sun-icon');
    const moonIcon = document.getElementById('moon-icon');
    
    sunIcon.classList.toggle('hidden', isDark);
    moonIcon.classList.toggle('hidden', !isDark);
    
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    // start/stop universe background to match theme
    try { startUniverseIfNeeded(); } catch (e) { /* no-op */ }
}

// --- Universe background (dark theme) ---
const universe = {
    canvas: null,
    ctx: null,
    particles: [],
    animationId: null,
    active: false,
};

// Visual presets for the universe background. Values adjust density, spark frequency, color ranges, and motion.
const PRESET_KEY = 'effects:preset';
const VISUAL_PRESETS = {
    subtle: {
        densityDiv: 12,
        maxCount: 220,
        countMin: 40,
        smallScreenFactor: 0.35,
        sparkFreq: 0.06,
        zMin: 0.3,
        zRange: 1.6,
        rSparkMin: 2, rSparkMax: 4,
        rStarMin: 0.3, rStarMax: 1.9,
        vxSpark: 0.05, vxStar: 0.25,
        vySpark: 0.02, vyStar: 0.2,
        glowMin: 0.2, glowMax: 1.1,
        twinkleBase: 0.6, twinkleVar: 1.6,
        hueStarMin: 200, hueStarRange: 70,
        hueSparkMin: 30, hueSparkRange: 20
    },
    cinematic: {
        densityDiv: 7,
        maxCount: 420,
        countMin: 80,
        smallScreenFactor: 0.5,
        sparkFreq: 0.14,
        zMin: 0.2,
        zRange: 2.0,
        rSparkMin: 1.8, rSparkMax: 4.4,
        rStarMin: 0.4, rStarMax: 3.4,
        vxSpark: 0.28, vxStar: 0.6,
        vySpark: 0.10, vyStar: 0.42,
        glowMin: 0.6, glowMax: 1.2,
        twinkleBase: 0.8, twinkleVar: 2.0,
        hueStarMin: 160, hueStarRange: 140,
        hueSparkMin: 30, hueSparkRange: 40
    },
    dramatic: {
        densityDiv: 5,
        maxCount: 600,
        countMin: 120,
        smallScreenFactor: 0.55,
        sparkFreq: 0.22,
        zMin: 0.1,
        zRange: 2.6,
        rSparkMin: 2.2, rSparkMax: 5.6,
        rStarMin: 0.6, rStarMax: 4.0,
        vxSpark: 0.42, vxStar: 0.9,
        vySpark: 0.18, vyStar: 0.6,
        glowMin: 0.7, glowMax: 1.4,
        twinkleBase: 0.9, twinkleVar: 2.6,
        hueStarMin: 140, hueStarRange: 160,
        hueSparkMin: 18, hueSparkRange: 60
    }
};

let currentVisualPreset = localStorage.getItem(PRESET_KEY) || 'cinematic';

// Nebula palettes for canvas backgrounds per preset
const NEBULA_PALETTES = {
    subtle: [
        ['rgba(140,160,200,0.12)', 'rgba(110,140,180,0.04)'],
        ['rgba(220,200,170,0.04)', 'rgba(220,200,170,0.01)'],
        ['rgba(180,190,210,0.06)', 'rgba(160,170,200,0.02)']
    ],
    cinematic: [
        ['rgba(180,120,255,0.16)', 'rgba(110,180,255,0.06)'],
        ['rgba(255,170,110,0.08)', 'rgba(255,110,80,0.02)'],
        ['rgba(90,160,200,0.10)', 'rgba(70,100,220,0.05)']
    ],
    dramatic: [
        ['rgba(220,100,255,0.22)', 'rgba(140,200,255,0.10)'],
        ['rgba(255,140,60,0.14)', 'rgba(255,90,40,0.06)'],
        ['rgba(120,190,230,0.14)', 'rgba(90,120,240,0.08)']
    ]
};

// Dune visual adjustments for light theme per preset
const DUNE_PRESETS = {
    subtle: {
        fills: ['rgba(255, 223, 134, 0.8)', 'rgba(255, 244, 199, 0.75)', 'rgba(255, 236, 166, 0.7)'],
        speeds: [24, 28, 32]
    },
    cinematic: {
        fills: ['rgba(255, 223, 134, 0.95)', 'rgba(255, 244, 199, 0.9)', 'rgba(255, 236, 166, 0.85)'],
        speeds: [20, 26, 30]
    },
    dramatic: {
        fills: ['rgba(255, 200, 100, 0.98)', 'rgba(255, 230, 160, 0.95)', 'rgba(255, 210, 120, 0.9)'],
        speeds: [16, 20, 24]
    }
};

const PRESET_DESCRIPTIONS = {
    subtle: 'Subtle ‚Äî low density, gentle motion and soft halos. Good for low-power devices and when you want an unobtrusive background.',
    cinematic: 'Cinematic ‚Äî balanced density with richer nebula colors and warm sparks for depth. Good default for a polished look.',
    dramatic: 'Dramatic ‚Äî high density, bold warm sparks and larger halos for a cinematic, high-impact background. Uses more CPU.'
};

function applyVisualPresetToUI() {
    // Update segmented button UI to reflect currentVisualPreset
    const buttons = document.querySelectorAll('.preset-btn');
    buttons.forEach(btn => {
        const name = btn.getAttribute('data-preset');
        const active = name === currentVisualPreset;
        btn.setAttribute('aria-pressed', active ? 'true' : 'false');
        if (active) btn.classList.add('active'); else btn.classList.remove('active');
    });
}

function showPresetHelp(name) {
    try {
        const el = document.getElementById('preset-help');
        if (!el) return;
        el.textContent = PRESET_DESCRIPTIONS[name] || '';
    } catch (e) { /* no-op */ }
}

function setVisualPreset(name) {
    if (!VISUAL_PRESETS[name]) name = 'cinematic';
    currentVisualPreset = name;
    localStorage.setItem(PRESET_KEY, name);
    applyVisualPresetToUI();
    showPresetHelp(name);
    // update body class for stylesheet hooks and state
    try {
        document.body.classList.remove('preset-subtle','preset-cinematic','preset-dramatic');
        document.body.classList.add('preset-' + name);
    } catch (e) {}
    // Update dunes for light theme to reflect preset
    try { updateDunesForPreset(name); } catch (e) {}
    // if universe is active, re-seed particles for immediate feedback
    try { if (universe.active) createParticles(); } catch (e) { /* no-op */ }
}

function updateDunesForPreset(name) {
    const cfg = DUNE_PRESETS[name] || DUNE_PRESETS.cinematic;
    const dunes = document.querySelectorAll('#dunes svg .dune, #dunes svg path');
    // prefer targeting the path elements inside svg
    const paths = document.querySelectorAll('#dunes svg path');
    if (paths && paths.length) {
        paths.forEach((p, i) => {
            const fill = cfg.fills[i] || cfg.fills[ i % cfg.fills.length ];
            p.setAttribute('fill', fill);
            // adjust opacity slightly from fill alpha
            p.style.opacity = 0.9 - (i * 0.05);
        });
    }
    // adjust animation speeds if present by changing inline style on svg elements
    const svgs = document.querySelectorAll('#dunes svg');
    svgs.forEach((s, i) => {
        const dur = (cfg.speeds[i] || cfg.speeds[0]) + 's';
        s.style.animationDuration = dur;
    });
}

function initUniverse() {
    const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    universe.canvas = document.getElementById('universe-canvas');
    if (!universe.canvas) return;
    universe.ctx = universe.canvas.getContext('2d');

    // Sizing
    function resize() {
        const dpr = Math.max(1, window.devicePixelRatio || 1);
        universe.canvas.width = Math.floor(universe.canvas.clientWidth * dpr);
        universe.canvas.height = Math.floor(universe.canvas.clientHeight * dpr);
        if (universe.ctx) universe.ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
    }
    resize();
    window.addEventListener('resize', () => {
        resize();
        // re-seed particles for new size
        if (universe.active) createParticles();
    });

    // Create a modest number of particles; fewer on small screens or reduced motion
    // Cinematic particle seeder: denser, richer colors, and more prominent sparks
    function createParticles() {
        const w = universe.canvas.clientWidth;
        const preset = VISUAL_PRESETS[currentVisualPreset] || VISUAL_PRESETS.cinematic;
        // base count derived from width and preset density
        const countBase = Math.max(preset.countMin || 40, Math.floor(w / preset.densityDiv));
        const count = Math.min(preset.maxCount, countBase);
        universe.particles = [];
        const smallScreen = window.innerWidth < 640;
        const finalCount = smallScreen ? Math.floor(count * preset.smallScreenFactor) : count;
        for (let i = 0; i < finalCount; i++) {
            const isSpark = Math.random() < preset.sparkFreq;
            const z = preset.zMin + Math.random() * preset.zRange;

            const r = Math.random() * (isSpark ? (preset.rSparkMax - preset.rSparkMin) : (preset.rStarMax - preset.rStarMin)) + (isSpark ? preset.rSparkMin : preset.rStarMin);

            const vx = (Math.random() - 0.5) * (isSpark ? preset.vxSpark : preset.vxStar);
            const vy = (Math.random() - 0.5) * (isSpark ? preset.vySpark : preset.vyStar);

            let hue;
            if (isSpark) {
                hue = preset.hueSparkMin + Math.random() * (preset.hueSparkRange || 30);
            } else {
                hue = preset.hueStarMin + Math.random() * (preset.hueStarRange || 80);
            }

            universe.particles.push({
                x: Math.random() * universe.canvas.clientWidth,
                y: Math.random() * universe.canvas.clientHeight,
                z: z,
                r: r,
                vx: vx,
                vy: vy,
                glow: (preset.glowMin || 0.4) + Math.random() * ((preset.glowMax || 1.0) - (preset.glowMin || 0.4)),
                phase: Math.random() * Math.PI * 2,
                twinkleSpeed: (preset.twinkleBase || 0.6) + Math.random() * (preset.twinkleVar || 1.6),
                hue: Math.floor(hue),
                type: isSpark ? 'spark' : 'star'
            });
        }
    }

    function draw() {
        if (!universe.ctx) return;
        const ctx = universe.ctx;
        const w = universe.canvas.clientWidth;
        const h = universe.canvas.clientHeight;
        const t = performance.now() / 1000;

        // cinematic gradient background for dramatic depth
        const g = ctx.createLinearGradient(0, 0, 0, h);
        g.addColorStop(0, '#02020a');
        g.addColorStop(0.35, '#0b1026');
        g.addColorStop(0.65, '#07183a');
        g.addColorStop(1, '#001420');
        ctx.fillStyle = g;
        ctx.fillRect(0, 0, w, h);

        // layered nebula blobs ‚Äî palette depends on the selected preset
        const palette = NEBULA_PALETTES[currentVisualPreset] || NEBULA_PALETTES.cinematic;
        const nebulaLayers = [
            { ox: 0.18, oy: 0.12, scale: 0.42, stops: [ [palette[0][0], 0], [palette[0][1], 0.45], ['rgba(0,0,0,0)', 1] ] },
            { ox: 0.62, oy: 0.22, scale: 0.38, stops: [ [palette[1][0], 0], [palette[1][1], 0.4], ['rgba(0,0,0,0)', 1] ] },
            { ox: 0.42, oy: 0.46, scale: 0.5, stops: [ [palette[2][0], 0], [palette[2][1], 0.5], ['rgba(0,0,0,0)', 1] ] }
        ];
        nebulaLayers.forEach((layer, i) => {
            const nx = layer.ox * w;
            const ny = layer.oy * h;
            const rad = Math.min(w, h) * layer.scale;
            const ng = ctx.createRadialGradient(nx, ny, rad * 0.03, nx, ny, rad);
            layer.stops.forEach(s => ng.addColorStop(s[1], s[0]));
            ctx.fillStyle = ng;
            ctx.beginPath();
            ctx.arc(nx, ny, rad, 0, Math.PI * 2);
            ctx.fill();
            // extra soft light for cinematic glow
            ctx.globalCompositeOperation = 'lighter';
            const glow = ctx.createRadialGradient(nx, ny, 0, nx, ny, rad * 1.6);
            const glowColor = layer.stops[0] ? layer.stops[0][0] : 'rgba(180,120,255,0.04)';
            // use a very transparent version of the first stop for glow
            const glowRGBA = glowColor.replace('rgb', 'rgba').replace(')', '').replace(')', '');
            // fallback glow
            glow.addColorStop(0, 'rgba(180,120,255,0.04)');
            glow.addColorStop(1, 'rgba(0,0,0,0)');
            ctx.fillStyle = glow;
            ctx.beginPath();
            ctx.arc(nx, ny, rad * 1.6, 0, Math.PI * 2);
            ctx.fill();
            ctx.globalCompositeOperation = 'source-over';
        });

        // stars
        universe.particles.forEach(p => {
            // movement with slight depth modulation
            p.x += p.vx * (1 + p.z * 0.08);
            p.y += p.vy * (1 + p.z * 0.08);
            if (p.x < -12) p.x = w + 12;
            if (p.x > w + 12) p.x = -12;
            if (p.y < -12) p.y = h + 12;
            if (p.y > h + 12) p.y = -12;

            // twinkle
            const tw = 0.6 + 0.45 * Math.sin(t * p.twinkleSpeed + p.phase);

            if (p.type === 'spark') {
                // cinematic sparks: warm, slightly larger, with stronger halo
                const alpha = Math.min(1, 0.85 * p.glow * tw + 0.12);
                // core
                ctx.beginPath();
                ctx.fillStyle = `hsla(${p.hue}, 100%, 60%, ${alpha})`;
                ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2);
                ctx.fill();
                // bright inner ring
                const inner = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.r * 4);
                inner.addColorStop(0, `hsla(${p.hue},100%,70%,${0.28 * p.glow * tw})`);
                inner.addColorStop(1, 'rgba(0,0,0,0)');
                ctx.fillStyle = inner;
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.r * 4, 0, Math.PI * 2);
                ctx.fill();
                // soft outer halo
                ctx.globalCompositeOperation = 'lighter';
                const halo = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.r * 12);
                halo.addColorStop(0, `hsla(${p.hue},90%,65%,${0.06 * p.glow * tw})`);
                halo.addColorStop(1, 'rgba(0,0,0,0)');
                ctx.fillStyle = halo;
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.r * 12, 0, Math.PI * 2);
                ctx.fill();
                ctx.globalCompositeOperation = 'source-over';
            } else {
                const alpha = 0.5 * p.glow * tw;
                // star core (slightly colored by hue for cinematic depth)
                ctx.beginPath();
                ctx.fillStyle = `hsla(${p.hue}, 90%, 88%, ${alpha})`;
                ctx.arc(p.x, p.y, (p.r * p.z), 0, Math.PI * 2);
                ctx.fill();
                // colored halo
                ctx.globalCompositeOperation = 'lighter';
                const halo = ctx.createRadialGradient(p.x, p.y, 0, p.x, p.y, p.r * 9);
                halo.addColorStop(0, `hsla(${p.hue},80%,70%,${0.06 * p.glow * tw})`);
                halo.addColorStop(1, 'rgba(0,0,0,0)');
                ctx.fillStyle = halo;
                ctx.beginPath();
                ctx.arc(p.x, p.y, p.r * 9, 0, Math.PI * 2);
                ctx.fill();
                ctx.globalCompositeOperation = 'source-over';
            }
        });
    }

    function animate() {
        if (!universe.active) return;
        draw();
        universe.animationId = requestAnimationFrame(animate);
    }

    // start with created particles
    createParticles();

    // expose helper functions
    universe.start = function() {
        if (universe.active) return;
        if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return; // honor reduced motion
        universe.active = true;
        createParticles();
        universe.animationId = requestAnimationFrame(animate);
    };
    universe.stop = function() {
        universe.active = false;
        if (universe.animationId) cancelAnimationFrame(universe.animationId);
        universe.animationId = null;
        // clear canvas for light theme
        if (universe.ctx) universe.ctx.clearRect(0, 0, universe.canvas.width, universe.canvas.height);
    };
}

function startUniverseIfNeeded() {
    const canvas = document.getElementById('universe-canvas');
    if (!canvas) return;
    if (!universe.canvas) initUniverse();
    const isDark = document.body.classList.contains('dark-mode');
    if (isDark && effectsEnabled) universe.start(); else universe.stop();
}

function applyEffectsSetting() {
    const saved = localStorage.getItem('effects:enabled');
    effectsEnabled = saved === null ? true : saved === 'true';
    document.body.classList.toggle('no-effects', !effectsEnabled);
    // ensure reduced motion preference also takes precedence
    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
        effectsEnabled = false;
        document.body.classList.add('no-motion');
    }
    const btn = document.getElementById('effects-toggle');
    if (btn) {
        btn.setAttribute('aria-pressed', effectsEnabled ? 'true' : 'false');
        // localized title using translations
        const label = t('ui.effects.label') || 'Effects';
        const onText = t('ui.effects.on') || 'On';
        const offText = t('ui.effects.off') || 'Off';
        btn.title = `${label}: ${effectsEnabled ? onText : offText}`;
        // also update aria-label for screen readers
        btn.setAttribute('aria-label', `${label}: ${effectsEnabled ? onText : offText}`);
    }
    // update visible state label
    const state = document.getElementById('effects-state');
    if (state) state.textContent = effectsEnabled ? t('ui.effects.on') || 'On' : t('ui.effects.off') || 'Off';
    // update paused badge title too
    const pausedBadge = document.getElementById('paused-badge');
    if (pausedBadge) pausedBadge.title = t('ui.effects.paused') || 'Paused';
    startUniverseIfNeeded();
}

function toggleEffects() {
    effectsEnabled = !effectsEnabled;
    localStorage.setItem('effects:enabled', effectsEnabled ? 'true' : 'false');
    applyEffectsSetting();
}

// keyboard support for the effects toggle (Enter/Space) - attach during DOMContentLoaded
function attachEffectsKeyboardSupport() {
    const btn = document.getElementById('effects-toggle');
    if (!btn) return;
    btn.addEventListener('keydown', (ev) => {
        if (ev.key === 'Enter' || ev.key === ' ') {
            ev.preventDefault();
            toggleEffects();
        }
    });
}

// Pause/resume when the page visibility changes to save CPU/battery
document.addEventListener('visibilitychange', () => {
    const pausedBadge = document.getElementById('paused-badge');
    if (document.hidden) {
        try { universe.stop(); } catch (e) {}
        document.body.classList.add('effects-paused-hidden');
        if (pausedBadge) {
            pausedBadge.setAttribute('aria-hidden', 'false');
            pausedBadge.title = t('ui.effects.paused') || 'Paused';
        }
    } else {
        document.body.classList.remove('effects-paused-hidden');
        if (pausedBadge) {
            pausedBadge.setAttribute('aria-hidden', 'true');
            pausedBadge.title = t('ui.effects.paused') || 'Paused';
        }
        try { startUniverseIfNeeded(); } catch (e) {}
    }
});

// Apply saved theme and language on load
window.addEventListener('DOMContentLoaded', () => {
    // Theme
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-mode');
        document.getElementById('sun-icon').classList.add('hidden');
        document.getElementById('moon-icon').classList.remove('hidden');
    }

    // Language
    try {
        const initialLang = getSystemLang();
        populateLangList();
        applyTranslations(initialLang);
        localStorage.setItem(LANG_KEY, initialLang);
    } catch (_) { /* no-op */ }

    // Effects (background animations)
    try { applyEffectsSetting(); } catch (e) { /* no-op */ }

    // Visual preset segmented control wiring
    try {
        // ensure currentVisualPreset is set from storage at load
        if (!currentVisualPreset) currentVisualPreset = localStorage.getItem(PRESET_KEY) || 'cinematic';
        applyVisualPresetToUI();
        const buttons = document.querySelectorAll('.preset-btn');
        buttons.forEach(btn => {
            btn.addEventListener('click', (ev) => {
                const name = btn.getAttribute('data-preset');
                setVisualPreset(name);
                applyVisualPresetToUI();
            });
            // keyboard support for accessibility (Enter / Space)
            btn.addEventListener('keydown', (ev) => {
                if (ev.key === 'Enter' || ev.key === ' ') {
                    ev.preventDefault();
                    const name = btn.getAttribute('data-preset');
                    setVisualPreset(name);
                    applyVisualPresetToUI();
                }
            });
            // left/right arrow navigation between presets
            btn.addEventListener('keydown', (ev) => {
                if (ev.key === 'ArrowLeft' || ev.key === 'ArrowRight') {
                    ev.preventDefault();
                    const all = Array.from(document.querySelectorAll('.preset-btn'));
                    const idx = all.indexOf(ev.currentTarget);
                    if (idx === -1) return;
                    const dir = ev.key === 'ArrowLeft' ? -1 : 1;
                    const next = (idx + dir + all.length) % all.length;
                    const nextBtn = all[next];
                    nextBtn.focus();
                    const name = nextBtn.getAttribute('data-preset');
                    setVisualPreset(name);
                    applyVisualPresetToUI();
                }
            });
            // hover/focus show description
            btn.addEventListener('mouseenter', (ev) => {
                const name = btn.getAttribute('data-preset');
                showPresetHelp(name);
            });
            btn.addEventListener('mouseleave', (ev) => {
                showPresetHelp(currentVisualPreset);
            });
            btn.addEventListener('focus', (ev) => {
                const name = btn.getAttribute('data-preset');
                showPresetHelp(name);
            });
            btn.addEventListener('blur', (ev) => {
                showPresetHelp(currentVisualPreset);
            });
        });
    } catch (e) { /* no-op */ }

    // Language flyout interactions with delayed open/close
    const selector = document.querySelector('.lang-selector');
    const btn = document.getElementById('lang-button');
    const panel = selector ? selector.querySelector('.lang-flyout') : null;
    let openTimer, closeTimer;
    const openFlyout = () => {
        clearTimeout(closeTimer);
        openTimer = setTimeout(() => {
            selector && selector.classList.add('open');
            btn && btn.setAttribute('aria-expanded', 'true');
        }, 120);
    };
    const closeFlyout = () => {
        clearTimeout(openTimer);
        closeTimer = setTimeout(() => {
            selector && selector.classList.remove('open');
            btn && btn.setAttribute('aria-expanded', 'false');
        }, 220);
    };
    if (btn && panel && selector) {
        ['mouseenter','focus'].forEach(ev => btn.addEventListener(ev, openFlyout));
        ['mouseleave','blur'].forEach(ev => btn.addEventListener(ev, closeFlyout));
        ['mouseenter','focus'].forEach(ev => panel.addEventListener(ev, openFlyout));
        ['mouseleave','blur'].forEach(ev => panel.addEventListener(ev, closeFlyout));
        btn.addEventListener('click', () => {
            if (selector.classList.contains('open')) { closeFlyout(); }
            else { openFlyout(); }
        });
    }
    // Start or stop the universe background according to the initial theme
    try { startUniverseIfNeeded(); } catch (e) { /* no-op */ }
    // attach keyboard support for effects toggle
    try { attachEffectsKeyboardSupport(); } catch (e) { /* no-op */ }
    // show help for the initial preset
    try { showPresetHelp(currentVisualPreset); } catch (e) {}
    // apply dunes and body class for initial preset so light theme reflects it
    try { document.body.classList.add('preset-' + currentVisualPreset); updateDunesForPreset(currentVisualPreset); } catch (e) {}
});
